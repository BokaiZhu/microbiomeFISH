library(DECIPHER)
gsub()
devtools::load_all()
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
test=read_arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
test=read_arb("~/paper/Num1/code_related/example2.prb")
read.arb= function(prb_file){
read_in=read.table(prb_file, skip = 8,sep='|', fill = NA)
# read the table
formated=read_in %>% separate(V1,c("target","len","location","pos","start","qual","cover")) %>% separate(V2,c("empty","first","second","third"),sep = "[ ]{1,}")
# ignore the warnings
### more formating
formated=formated[,c(-4,-6,-8)] # get rid of the unused columns
formated[formated=="-"]=0 # change - to 0 hits
formated[,c("len","start","cover","first","second","third")]=sapply(formated[,c("len","start","cover","first","second","third")], as.integer) # change to int
formated$target=RNAStringSet(formated$target) # change the format to rnastring set
formated$probe=reverseComplement(formated$target)
formated$probe=gsub("U","T",formated$probe) # change probe sequence from RNA to DNA
return(formated)
}
test=read.arb("~/paper/Num1/code_related/example2.prb")
library(dplyr)
library(tidyr)
read.arb= function(prb_file){
read_in=read.table(prb_file, skip = 8,sep='|', fill = NA)
# read the table
formated=read_in %>% separate(V1,c("target","len","location","pos","start","qual","cover")) %>% separate(V2,c("empty","first","second","third"),sep = "[ ]{1,}")
# ignore the warnings
### more formating
formated=formated[,c(-4,-6,-8)] # get rid of the unused columns
formated[formated=="-"]=0 # change - to 0 hits
formated[,c("len","start","cover","first","second","third")]=sapply(formated[,c("len","start","cover","first","second","third")], as.integer) # change to int
formated$target=RNAStringSet(formated$target) # change the format to rnastring set
formated$probe=reverseComplement(formated$target)
formated$probe=gsub("U","T",formated$probe) # change probe sequence from RNA to DNA
return(formated)
}
test=read.arb("~/paper/Num1/code_related/example2.prb")
View(test)
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
test=read.arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
View(formatted)
View(formated)
test=read.table("~/paper/Num1/code_related/example_input_noheader.prb", sep='|', fill = NA)
head(test)
library(dplyr)
library(tidyr)
test2=test %>% separate(V1,c("target","len","location","pos","start","cover")) %>% separate(V2,c("empty","first","second","third"),sep = " ")
head(test2)
# read the table
test2=test %>% separate(V1,c("target","len","location","pos","start")) %>% separate(V2,c("empty","first","second","third"),sep = " ")
### more formating
test2=test2[,c(-4,-6)] # get rid of the unused columns
test2[test2=="-"]=0 # change - to 0 hits
test2[,c("len","start","first","second","third")]=sapply(test2[,c("len","start","first","second","third")], as.integer) # change to int
###
head(test2)
test=read.table("~/paper/Num1/code_related/example2.prb", skip = 8,sep='|', fill = NA)
# read the table
test2=test %>% separate(V1,c("target","len","location","pos","start","qual","cover")) %>% separate(V2,c("empty","first","second","third"),sep = "[ ]{1,}")
# ignore the warnings
### more formating
test2=test2[,c(-4,-8)] # get rid of the unused columns
test2[test2=="-"]=0 # change - to 0 hits
test2[,c("len","start","cover","first","second","third")]=sapply(test2[,c("len","start","cover","first","second","third")], as.integer) # change to int
###
head(test2)
test2$target=RNAStringSet(formated$target) # change the format to rnastring set
test2$target=RNAStringSet(test2$target) # change the format to rnastring set
View(test2)
test2$probe=reverseComplement(test2$target)
test2$probe=gsub("U","T",test2$probe) # change probe sequence from RNA to DNA
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
detach("package:DECIPHER", unload = TRUE)
detach("package:BiocGenerics", unload = TRUE)
detach("package:Biostrings", unload = TRUE)
detach("package:dplyr", unload = TRUE)
detach("package:IRanges", unload = TRUE)
detach("package:S4Vectors", unload = TRUE)
detach("package:RSQLite", unload = TRUE)
detach("package:XVector", unload = TRUE)
detach("package:tidyr", unload = TRUE)
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
test=read_arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
devtools::load_all()
test_test("atgcccga")
test_test("auuuggcccgguaua")
devtools::load_all()
test_test("auuuggcccgguaua")
test=read.table("~/paper/Num1/code_related/example2.prb", skip = 8,sep='|', fill = NA)
# read the table
test2=test %>% separate(V1,c("target","len","location","pos","start","qual","cover")) %>% separate(V2,c("empty","first","second","third"),sep = "[ ]{1,}")
# ignore the warnings
### more formating
test2=test2[,c(-4,-8)] # get rid of the unused columns
test2[test2=="-"]=0 # change - to 0 hits
test2[,c("len","start","cover","first","second","third")]=sapply(test2[,c("len","start","cover","first","second","third")], as.integer) # change to int
View(test2)
class(test2$target)
data.frame("auuuuu","gggggaauu")
ip=data.frame(matrix(NA, nrow = 2, ncol = 1))
ip[1,1]="auuuuuu"
ip[2,1]="auuggguuuu"
head(ip)
test_test(ip)
test_test(ip[,1])
colnames(ip)="seq"
test_test(ip$seq)
devtools::load_all()
test_test(ip)
ip
test_test(ip)
a=test_test(ip)
View(a)
test=read.table("~/paper/Num1/code_related/example2.prb", skip = 8,sep='|', fill = NA)
# read the table
test2=test %>% separate(V1,c("target","len","location","pos","start","qual","cover")) %>% separate(V2,c("empty","first","second","third"),sep = "[ ]{1,}")
# ignore the warnings
### more formating
test2=test2[,c(-4,-8)] # get rid of the unused columns
test2[test2=="-"]=0 # change - to 0 hits
test2[,c("len","start","cover","first","second","third")]=sapply(test2[,c("len","start","cover","first","second","third")], as.integer) # change to int
test=read_arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
test_test(test2)
a=test_test(test2)
View(a)
test=read.table("~/paper/Num1/code_related/example2.prb", skip = 8,sep='|', fill = NA)
# read the table
test2=test %>% separate(V1,c("target","len","location","pos","start","qual","cover")) %>% separate(V2,c("empty","first","second","third"),sep = "[ ]{1,}")
# ignore the warnings
### more formating
test2=test2[,c(-4,-6,-8)] # get rid of the unused columns
test2[test2=="-"]=0 # change - to 0 hits
a=test_test(test2)
View(a)
test=read.table("~/paper/Num1/code_related/example2.prb", skip = 8,sep='|', fill = NA)
# read the table
test2=test %>% separate(V1,c("target","len","location","pos","start","qual","cover")) %>% separate(V2,c("empty","first","second","third"),sep = "[ ]{1,}")
# ignore the warnings
### more formating
test2=test2[,c(-4,-6,-8)] # get rid of the unused columns
test2[test2=="-"]=0 # change - to 0 hits
test2[,c("len","start","cover","first","second","third")]=sapply(test2[,c("len","start","cover","first","second","third")], as.integer) # change to int
test2$target=RNAStringSet(test2$target) # change the format to rnastring set
test2$probe=reverseComplement(test2$target)
test2$probe=gsub("U","T",test2$probe) # change probe sequence from RNA to DNA
devtools::load_all()
test=read_arb("~/paper/Num1/code_related/example2.prb")
View(test)
test_test(test)
a=test_test(test)
View(a)
devtools::load_all()
test3=read_arb("~/paper/Num1/code_related/example2.prb")
devtools::load_all()
test3=read_arb("~/paper/Num1/code_related/example2.prb")
